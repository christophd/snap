/*
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by vfsgen; DO NOT EDIT.

package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// assets statically implements the virtual filesystem provided to vfsgen.
var assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/minio-standalone-deployment.yaml": &vfsgen۰CompressedFileInfo{
			name:             "minio-standalone-deployment.yaml",
			modTime:          time.Time{},
			uncompressedSize: 1322,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x92\x4d\x6f\xdb\x3c\x10\x84\xef\xfa\x15\x8b\xdc\x15\x39\xb9\xbd\xba\xbd\x70\xdc\x22\x48\x93\x1a\x76\x11\xa0\xa7\x60\x43\x4d\x6d\xc2\xfc\x02\xb9\x16\xa0\x7f\x5f\xd0\x1f\xaa\x18\xb7\x05\xd2\x02\xe5\x91\xb3\x9c\x79\x76\x97\x1c\xf4\x33\x62\xd2\xde\xb5\xc4\x21\xa4\xa6\xbf\xa9\x76\xda\x75\x2d\xdd\x21\x18\x3f\x58\x38\xa9\x2c\x84\x3b\x16\x6e\x2b\x22\xc7\x16\x2d\x25\xc7\xa1\xb6\xda\x69\x5f\x11\x19\x7e\x85\x49\x59\xa4\x83\x70\xad\xbc\x13\xd6\x0e\xb1\x16\xef\x4d\xba\xd6\xbe\x51\xde\x06\xef\xe0\xa4\xa5\x84\xd8\x23\x56\x29\x40\xe5\x37\x09\x06\x4a\x7c\x3c\xbe\xb7\x2c\x6a\xfb\x69\x62\xf8\x1e\x4b\xa2\x24\x91\x05\x9b\xe1\xf8\x56\x86\x80\x96\x56\x50\x11\x2c\xa8\x88\x04\x36\x18\x16\x9c\xb2\x26\x6d\xe5\x63\x8a\xd8\xf7\x05\x13\x9d\xfb\xc9\xa7\xf7\x66\x6f\x31\x5a\xd5\xa7\xa9\xe5\xb0\xd1\x3d\xe4\xb1\x27\x81\x93\xe7\x43\xf5\xdc\xb0\xb6\x3f\xc2\x89\x54\xbe\x78\x7a\x33\xee\x3a\xf4\xf5\x41\x38\x15\x8e\x78\x17\x61\xe7\xed\x4c\x89\x1e\xfd\xde\xc9\xa4\xc3\x29\x18\x4d\xa2\x6d\xae\x5b\xb2\x6c\x5b\xba\x6a\xb2\x78\x35\x8a\xda\xf2\xe6\xec\xde\x94\x19\x1c\x37\x85\xf7\x64\x38\xc7\x8b\xa6\x18\x00\x5c\x7f\x49\xf2\x78\xff\x74\xff\xf9\xe5\xff\xf9\x7c\xb1\x5e\xbf\x3c\x2c\xbe\x4e\xa0\x7a\x36\x7b\x7c\x88\xbe\x18\x52\xfe\x3f\x2a\x42\x1e\x30\xac\xf0\xad\x54\x2e\x3f\x6b\xad\x22\x3a\x38\xd1\x6c\xd2\x9b\xd2\x1d\x86\x96\x58\x29\xa4\x54\xef\x30\xfc\x02\x6c\xbd\x98\xaf\x16\x5f\xfe\x3d\xd8\xd1\xab\x00\x0b\x3e\x96\xab\x1c\xbf\xc2\xd2\x47\x69\xe9\xbf\xd9\x6c\x36\xaa\x11\xdc\x69\x87\x94\x96\xd1\xbf\x62\x4a\xb3\x15\x09\x1f\x21\x25\x60\x38\xac\xfe\xb8\xde\x66\x0b\x36\xb2\x6d\xb2\xc5\x50\x56\x5d\xe6\x10\x69\xa7\x73\x17\x77\x30\x3c\xac\xa1\xbc\xeb\x52\x4b\x37\xd3\x8a\x80\xa8\x7d\xf7\x33\xcd\xe8\x1e\x7f\x07\x99\x1d\xfe\x94\xf1\xf6\x37\x90\xb7\xb3\xea\x7b\x00\x00\x00\xff\xff\xa8\x14\x00\xc9\x2a\x05\x00\x00"),
		},
		"/minio-standalone-pvc.yaml": &vfsgen۰CompressedFileInfo{
			name:             "minio-standalone-pvc.yaml",
			modTime:          time.Time{},
			uncompressedSize: 224,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcc\xb1\x4e\x04\x31\x0c\x04\xd0\x3e\x5f\xe1\x1f\xc8\x21\x28\xd3\x52\x50\x21\x10\xc5\x51\x9b\xec\x08\x59\x24\x76\xb0\xbd\xfb\xfd\x68\x4f\x47\x39\xa3\x37\xc3\x4b\xae\xf0\x10\xd3\x46\xc7\x63\xf9\x11\xdd\x1a\xbd\x9f\x4d\x24\x34\xaf\x36\xf6\x89\xe7\xc1\x32\xcb\x44\xf2\xc6\xc9\xad\x10\x29\x4f\x34\x0a\xe5\x55\xa7\xa8\x58\x5d\x47\xed\x37\x45\x34\xf8\x0b\x23\x4e\x45\x37\x71\xe9\xa6\xc9\xa2\xf0\x9a\x66\x23\x2e\x62\x0f\xdd\xe6\x32\x85\x66\xa3\x80\x1f\xf0\x12\x0b\xfd\xdc\x70\xef\x88\x78\xb5\x0d\xf7\x8b\x4a\x1f\xe0\xed\xd3\x25\xf1\xa6\x1d\x85\xc8\x11\xb6\x7b\xff\x07\x8e\xdf\x1d\x91\xf7\x44\x14\x69\xce\xdf\x68\xf4\xf4\x22\xe5\x2f\x00\x00\xff\xff\x56\x19\xa3\x35\xe0\x00\x00\x00"),
		},
		"/minio-standalone-secret.yaml": &vfsgen۰CompressedFileInfo{
			name:             "minio-standalone-secret.yaml",
			modTime:          time.Time{},
			uncompressedSize: 139,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xca\x31\xae\x02\x41\x08\x06\xe0\x9e\x53\x70\x81\xdd\x97\xd7\xce\x25\x2c\x4c\xec\x71\xf6\x2f\x88\x33\x30\x02\x6e\xe2\xed\x8d\xf6\x9f\x2c\xbd\x21\x52\xdd\x1a\x9f\xff\xf4\x50\x3b\x1a\x5f\xd1\x03\x45\x13\x25\x87\x94\x34\x62\x36\x99\x68\x9c\x26\x6b\x9b\x6a\xea\x5b\x0f\x1c\xb0\x52\x19\x49\xcc\x43\xee\x18\xf9\x85\xfc\x43\x7b\x77\x2b\x51\x43\x6c\xe5\x3e\x72\x57\xff\xeb\x3e\x97\x1b\xac\x1a\x27\xe2\x44\x50\xbd\x17\x1a\x5f\x96\x3c\x5f\x20\xfa\x04\x00\x00\xff\xff\x2b\x16\xc0\x09\x8b\x00\x00\x00"),
		},
		"/minio-standalone-service.yaml": &vfsgen۰CompressedFileInfo{
			name:             "minio-standalone-service.yaml",
			modTime:          time.Time{},
			uncompressedSize: 276,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8e\xb1\x4a\x44\x41\x0c\x45\xfb\xf9\x8a\xfb\x03\xb3\x3e\x4b\x53\x6a\x6b\xb1\xa0\xd8\xc7\x79\x41\x82\x33\xc9\x90\x09\x0b\xfe\xbd\xbc\xc7\x56\x76\x96\x39\x9c\x13\x2e\x4f\xfd\x90\x58\xea\x46\xb8\x3d\x96\x6f\xb5\x9d\xf0\x26\x71\xd3\x26\x65\x48\xf2\xce\xc9\x54\x00\xe3\x21\x84\x65\x3c\xeb\x50\x53\xaf\xeb\x2e\x01\x9d\x3f\xa5\xaf\x43\xc2\x29\x5c\x9a\x5b\xb2\x9a\x44\x4d\xf7\xbe\x2e\xea\x0f\xcd\xc7\x74\x13\x4b\xc2\x11\x4a\x94\x35\xa5\x1d\x4d\xfe\x4c\x21\xbc\x3a\xef\xcf\xdc\xd9\x9a\x44\x01\xa6\x47\xde\x3f\xd6\xf3\x20\x3c\x6d\xdb\x76\x02\x20\x39\xbe\x24\xaf\x7f\xf1\x0c\x4f\x6f\xde\x09\xef\x2f\xd7\x02\x2c\xe9\xd2\xd2\xe3\xbf\xcb\x7e\x03\x00\x00\xff\xff\x91\xa5\xc7\xf8\x14\x01\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/minio-standalone-deployment.yaml"].(os.FileInfo),
		fs["/minio-standalone-pvc.yaml"].(os.FileInfo),
		fs["/minio-standalone-secret.yaml"].(os.FileInfo),
		fs["/minio-standalone-service.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
